/**
 * ./src/core/utils/getStyles.js
 *
 * @flow
 */

import { Platform, StyleSheet } from "react-native";
import _isObject from "lodash/isObject";
import _merge from "lodash/merge";

import type { StyleSheetType, StyleType } from "../flow";
import { theme } from "../constants";

type PropsType = { theme?: ?{} };

/**
 * get composed styles from the custom props
 * @type {Object}
 */
const getComposedStyles = (props: PropsType, cName: string): {} => {
  // if provide style definition does not exist
  if (!theme[cName]) {
    // @todo: add exception
    console.log(`${theme[cName]} does not exist in theme.`);
    return {};
  }

  const listExistingStyleProps = Object.keys(theme[cName]);
  const keys = Object.keys(props);
  let composedStyles = {};

  // apply custom styles to each prop in the same received order
  keys.forEach(
    (key: string): void => {
      const { [key]: k } = props;

      if (listExistingStyleProps.indexOf(key) > -1 && k) {
        composedStyles = _merge({}, composedStyles, theme[cName][key]);
      }
    }
  );

  return composedStyles;
};

/**
 * normalize and apply platform styles
 * @type {Function}
 */
const applyPlatform = (styles: StyleType): StyleType => {
  const platformStyles = {};

  Object.keys(styles).forEach(
    (name: string): void => {
      const { ios, android, ...style } = { ...styles[name] };
      let styl = style;

      if (ios && Platform.OS === "ios") {
        styl = { ...style, ...ios };
      }

      if (android && Platform.OS === "android") {
        styl = { ...style, ...android };
      }

      platformStyles[name] = styl;
    }
  );

  return platformStyles;
};

/**
 * getStyles component
 *
 * - the styles are separated as 'states' or classname definitions
 * - each classname supports android and ios keys form specific platform specs
 * - note that final styles respect the order in which they were introduced
 *
 * - each component could receive three kind of style definitions
 *   + default: inherit. from component base definition
 *   + composed: generated by custom key props used on the component
 *   + custom: provided to the component using the key prop 'styles'
 *
 * @param  {object} props   component props
 * @param  {string} cName   component name
 * @return {object}         StyleSheet definition for the component
 */

export default (props: PropsType = {}, cName: string): StyleSheetType => {
  // default styles
  const defaultStyles = _isObject(theme[cName]) ? theme[cName].default : {};
  // composed styles
  const composedStyles = getComposedStyles(props, cName);
  // custom styles
  const customStyles = props.theme ? props.theme : {};
  // full styles object
  const fullStyles = _merge({}, defaultStyles, composedStyles, customStyles);
  // finally filter platform and use StyleSheet for performance
  return StyleSheet.create(applyPlatform(fullStyles));
};
